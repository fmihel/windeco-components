@use "sass:map";
@use 'sass:meta';
@use "sass:color";

@mixin defineThemeVars($maps:(),$theme:$wd-default-theme){
    $themeVars:();

    @each $varName,$defaultValue in $defaults{
        @if ($varName != 'colors-to-rgb'){
            $value:if(map-has-key($map: $maps, $key: $varName),#{map-get($map: $maps, $key:$varName )},#{$defaultValue});
            --v2-wd-#{$varName}:#{$value};
            $themeVars:map-merge($themeVars,(#{$varName}:$value));
        };
    };

 

    $colors:();
    @if (map-has-key($map: $defaults, $key:'colors-to-rgb' )){
        $colors:join($colors,map-get($map:$defaults,$key:'colors-to-rgb'));
    }

    @if (map-has-key($map: $maps, $key:'colors-to-rgb' )){
        $colors:join($colors,map-get($map:$maps,$key:'colors-to-rgb'));
    }

    @debug $colors;

    @each $varName in $colors{
        $acolor:map-get($map:$defaults, $key:$varName );
        $r:color.red($acolor);
        $g:color.green($acolor);
        $b:color.blue($acolor);
        //--wd-#{$key}:#{meta.inspect($acolor)};
        --v2-wd-#{$varName}-rgb:#{meta.inspect($r)},#{meta.inspect($g)},#{meta.inspect($b)} ;
    }

    $global-themes-vars:map-merge($global-themes-vars,(#{$theme}:$themeVars)) !global;
}
